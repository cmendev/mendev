---
import ThreeDots from "../components/icons/ThreeDots.astro";
import ThemeIcon from "../components/icons/ThemeIcon.astro";

import { MENU } from "../data/menu";
---

<nav
  class="fixed sm:static md:flex md:justify-center md:items-center max-sm:w-[100%] z-50"
>
  <div
    class="flex flex-wrap items-center lg:justify-center sm:justify-between mx-auto sm:w-[480px] md:w-[600px] lg:w-[740px] p-4"
  >
    <button
      id="menu"
      aria-label="toggle menu"
      type="button"
      class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-[#1c0b2b]/80 dark:text-gray-500 rounded-lg sm:hidden"
    >
      <span class="sr-only">Open main menu</span>
      <svg
        class="w-5 h-5"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 17 14"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M1 1h15M1 7h15M1 13h15"></path>
      </svg>
    </button>
    <div
      class="hidden border border-[#1c0b2b]/5 dark:border-white/5 rounded-lg w-full sm:block md:w-auto max-sm:backdrop-blur-lg z-50 max-sm:h-[30%] max-sm:w-[100%]"
      id="menu-toggle"
    >
      <ul
        class="font-medium flex flex-col sm:flex-row sm:justify-around items-center md:space-x-8 rtl:space-x-reverse text-[#1c0b2b] dark:text-white"
      >
        {
          MENU.map((menu) => (
            <li class="m-0">
              <a
                href={menu.tag}
                class="block py-2 px-3 hover:text-[#6f95ff]/90 dark:hover:text-sky-200/90"
                aria-current="page"
              >
                {menu.name}
              </a>
            </li>
          ))
        }
        <li>
          <div class="dropdown relative inline-block">
            <button
              class="py-2 px-3 hover:text-[#6f95ff]/90 dark:hover:text-sky-200/90" aria-label="Theme Button"
              ><ThreeDots /></button
            >
            <div
              class="dropdown-content absolute hidden bg-white dark:bg-neutral-950 shadow-lg min-w-[90px] z-10 rounded-lg top-full"
            >
              <div class="flex flex-col items-center py-3">
                <ThemeIcon />
              </div>
            </div>
          </div>
        </li>
      </ul>
    </div>
  </div>
</nav>
<style>
  .dropdown:hover .dropdown-content {
    display: block;
  }

  .dropdown.open .dropdown-content {
    display: block;
  }
</style>
<script is:inline>
  function applyMenuState() {
    const menuToggle = document.getElementById("menu-toggle");
    if (!menuToggle) return;

    const isMenuOpen = localStorage.getItem("menuOpen") === "true";
    if (isMenuOpen) {
      menuToggle.classList.remove("hidden");
    } else {
      menuToggle.classList.add("hidden");
    }
  }

  function toggleMenu() {
    const menuToggle = document.getElementById("menu-toggle");
    if (!menuToggle) return;

    const isCurrentlyOpen = !menuToggle.classList.contains("hidden");
    menuToggle.classList.toggle("hidden");

    // Guardar estado en localStorage
    localStorage.setItem("menuOpen", (!isCurrentlyOpen).toString());
  }

  function closeMenu() {
    const menuToggle = document.getElementById("menu-toggle");
    if (menuToggle && !menuToggle.classList.contains("hidden")) {
      menuToggle.classList.add("hidden");
      localStorage.setItem("menuOpen", "false");
    }
  }

  // Asegurar que el evento click se asigne después de un cambio de página
  function attachMenuEvent() {
    const menuButton = document.getElementById("menu");
    if (menuButton) {
      menuButton.removeEventListener("click", toggleMenu); // Evitar múltiples bindings
      menuButton.addEventListener("click", toggleMenu);
    }

    // Cerrar el menú solo al hacer clic en enlaces que redirigen
    document.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', (event) => {
        if (link.href && link.href !== window.location.href) {
          closeMenu();
        }
      });
    });
  }

  // Aplicar estado y eventos al cargar y después de un cambio de página
  document.addEventListener("astro:after-swap", () => {
    applyMenuState();
    attachMenuEvent();
  });

  document.addEventListener("DOMContentLoaded", () => {
    applyMenuState();
    attachMenuEvent();
  });
</script>
